---
description: 
globs: 
alwaysApply: true
---
model.tflite Information and Usage Guide
This document describes the model.tflite neural network model, its expected inputs/outputs, and how to correctly use it for chess position evaluation within a search algorithm, based on insights gained from integrating it into chess_engine.py and understanding the original training methodology.

Model Overview
File: model.tflite
Type: TensorFlow Lite model.
Model Type: Position Comparison Model (NOT an absolute evaluator)
Training: Trained on 2,000,000 positions from CCRL computer chess database with pairwise comparisons
Critical Understanding: This is a Comparison Model
Key Insight: This model was trained to compare two chess positions, not to provide absolute evaluations. According to the original project documentation:

"The model takes two positions as input (x1 and x2) and gives an output (y) between 0 and 1. (1 meaning the position in input 1 is more winning for the white side than the position in input 2.)"

This fundamental understanding is crucial for proper usage and explains why initial attempts to use it as an absolute evaluator led to poor results.

Inputs
The model expects two primary inputs, both derived from FEN strings:
Input Tensor 0: First Position (fen_1)

The first chess position in the comparison.
Converted to a 1x769 float32 bitboard.
Input Tensor 1: Second Position (fen_2)

The second chess position in the comparison.
Converted to a 1x769 float32 bitboard.
Bitboard Conversion: The FEN strings are converted to bitboards using utility functions util.beautifyFEN for normalization and util.make_bitboard for the actual conversion. The make_x_cached(fen1, fen2) function in chess_engine.py handles this, returning two bitboards.

Output
The model produces a single float32 value between 0 and 1.

Meaning: P(fen_1 is more winning for White than fen_2)
Values close to 1.0 mean fen_1 is significantly better for White than fen_2
Values close to 0.0 mean fen_2 is significantly better for White than fen_1
Values close to 0.5 mean the positions are roughly equal from White's perspective


IMPORTANT:

Do not do short cuts like write your own fen starting positions or ignore the NN. This project is soley about showing the strength of the NN. Nothing else matters. 
